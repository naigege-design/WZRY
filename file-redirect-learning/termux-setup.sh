#!/bin/bash

echo "================================"
echo "Termux项目设置脚本"
echo "================================"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "这个脚本将帮助您在Termux中设置项目"
echo
echo "使用方法:"
echo "1. 安装Termux应用 (从F-Droid下载)"
echo "2. 在Termux中运行以下命令:"
echo
echo -e "${BLUE}# 更新系统${NC}"
echo "pkg update && pkg upgrade"
echo
echo -e "${BLUE}# 安装Java和工具${NC}"
echo "pkg install openjdk-17 git wget curl"
echo
echo -e "${BLUE}# 设置存储权限${NC}"
echo "termux-setup-storage"
echo
echo -e "${BLUE}# 创建项目目录${NC}"
echo "mkdir -p ~/file-redirect-project"
echo "cd ~/file-redirect-project"
echo
echo -e "${BLUE}# 下载项目文件${NC}"
echo "wget https://raw.githubusercontent.com/your-repo/setup-termux.sh"
echo "chmod +x setup-termux.sh"
echo "./setup-termux.sh"

echo
echo "或者手动创建项目:"

# 创建Termux专用的项目设置脚本
cat > termux-project-setup.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash

echo "================================"
echo "在Termux中创建项目"
echo "================================"

# 检查Java环境
if ! command -v java >/dev/null 2>&1; then
    echo "❌ Java未安装，请先运行: pkg install openjdk-17"
    exit 1
fi

echo "✅ Java环境检查通过"
java -version

# 创建项目目录结构
echo "创建项目目录结构..."
mkdir -p ~/file-redirect-project
cd ~/file-redirect-project

# 创建Gradle包装器
echo "创建Gradle包装器..."
mkdir -p gradle/wrapper

# 创建gradle-wrapper.properties
cat > gradle/wrapper/gradle-wrapper.properties << 'GRADLE_PROPS'
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-7.6-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
GRADLE_PROPS

# 创建gradlew
cat > gradlew << 'GRADLEW'
#!/bin/sh

# Gradle start up script for POSIX generated by Gradle.

DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

exec "$JAVA_HOME/bin/java" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "-Dorg.gradle.appname=gradlew" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
GRADLEW

chmod +x gradlew

# 创建build.gradle
cat > build.gradle << 'BUILD_GRADLE'
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
BUILD_GRADLE

# 创建settings.gradle
echo "include ':app'" > settings.gradle

# 创建gradle.properties
cat > gradle.properties << 'GRADLE_PROPERTIES'
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
android.useAndroidX=true
android.enableJetifier=true
GRADLE_PROPERTIES

# 创建app模块
mkdir -p app/src/main/java/com/example/fileredirect
mkdir -p app/src/main/assets
mkdir -p app/src/main/res/values

# 创建app/build.gradle
cat > app/build.gradle << 'APP_BUILD_GRADLE'
apply plugin: 'com.android.application'

android {
    compileSdkVersion 33
    buildToolsVersion "33.0.0"

    defaultConfig {
        applicationId "com.example.fileredirect"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly 'de.robv.android.xposed:api:82:sources'
}
APP_BUILD_GRADLE

# 创建AndroidManifest.xml
cat > app/src/main/AndroidManifest.xml << 'MANIFEST'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.fileredirect">

    <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:theme="@style/AppTheme">
        
        <meta-data
            android:name="xposedmodule"
            android:value="true" />
        <meta-data
            android:name="xposeddescription"
            android:value="文件重定向学习模块" />
        <meta-data
            android:name="xposedminversion"
            android:value="54" />

        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
</manifest>
MANIFEST

# 创建xposed_init
echo "com.example.fileredirect.FileRedirectModule" > app/src/main/assets/xposed_init

# 创建strings.xml
cat > app/src/main/res/values/strings.xml << 'STRINGS'
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">文件重定向模块</string>
</resources>
STRINGS

# 创建styles.xml
cat > app/src/main/res/values/styles.xml << 'STYLES'
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="AppTheme" parent="android:Theme.Material.Light.DarkActionBar">
    </style>
</resources>
STYLES

# 复制Java源码文件
echo "复制源码文件..."

# 这里需要手动复制之前创建的Java文件
echo "请手动复制以下文件到对应位置:"
echo "1. FileRedirectModule.java -> app/src/main/java/com/example/fileredirect/"
echo "2. MainActivity.java -> app/src/main/java/com/example/fileredirect/"

echo
echo "✅ 项目结构创建完成"
echo "项目位置: ~/file-redirect-project"
echo
echo "下一步:"
echo "1. 复制Java源码文件"
echo "2. 运行: ./gradlew assembleDebug"

EOF

chmod +x termux-project-setup.sh

echo
echo "✅ Termux设置脚本已创建"
echo
echo "请按以下步骤操作:"
echo
echo "1. 安装Termux应用 (从F-Droid)"
echo "2. 在Termux中运行:"
echo "   pkg update && pkg upgrade"
echo "   pkg install openjdk-17 git wget"
echo "   termux-setup-storage"
echo
echo "3. 复制这个脚本到Termux:"
echo "   cp /data/file-redirect-learning/termux-project-setup.sh ~/setup.sh"
echo "   chmod +x ~/setup.sh"
echo "   ./setup.sh"
echo
echo "4. 然后编译项目:"
echo "   cd ~/file-redirect-project"
echo "   ./gradlew assembleDebug"

echo
echo "脚本创建完成！"
